package com.assignment.productservice.service;

import java.math.BigInteger;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.assignment.productservice.adapters.ProductAdapter;
import com.assignment.productservice.constants.ProductsConstants;
import com.assignment.productservice.dto.ErrorDto;
import com.assignment.productservice.dto.ProductDto;
import com.assignment.productservice.dto.ResponseDto;
import com.assignment.productservice.entity.Product;
import com.assignment.productservice.repository.ProductRepository;
import com.assignment.productservice.util.ElasticSearchUtil;
import com.assignment.productservice.util.ResponseUtil;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
@SuppressWarnings("unchecked")
public class ProductOperationService<T> {

	@Autowired
	private ProductRepository productRepository;

	@Autowired
	private ElasticSearchUtil elasticSearchUtil;

	@Autowired
	private ResponseUtil<T> responseUtil;

	public ResponseEntity<T> addProduct(ProductDto request, String loggedInUser) {
		log.info("Entering addProduct Method at {} ", System.currentTimeMillis());
		try {
			Product productEntityToPersist = ProductAdapter.convertModelToEntityForInsertion(request);
			productEntityToPersist.setCreatedBy(loggedInUser);
			productRepository.save(productEntityToPersist);
			elasticSearchUtil.indexObject(request);
			log.info("Product {} successfully created by {} ", productEntityToPersist.getProductId(), loggedInUser);
			return responseUtil.prepareResponse(
					(T) new ResponseDto(HttpStatus.CREATED, ProductsConstants.RECORD_CREATION_MESSAGE),
					HttpStatus.CREATED);
		} catch (Exception ex) {
			log.error("Exception occurred while adding new product with exception ", ex);
			return responseUtil
					.prepareResponse(
							(T) new ErrorDto(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage(),
									ex.getLocalizedMessage(), System.currentTimeMillis()),
							HttpStatus.INTERNAL_SERVER_ERROR);
		} finally {
			log.info("Exiting addProduct method at  {} ", System.currentTimeMillis());
		}
	}

	public ResponseEntity<T> updateProduct(ProductDto request, String loggedInUser) {
		log.info("Entering updateProduct Method at {} ", System.currentTimeMillis());
		try {
			Optional<Product> productEntityOptional = productRepository.findById(request.getProductId());
			if (productEntityOptional.isEmpty()) {
				return responseUtil.prepareResponse(
						(T) new ResponseDto(HttpStatus.BAD_REQUEST, ProductsConstants.INVALID_PRODUCT_ID),
						HttpStatus.BAD_REQUEST);
			}
			Product productEntity = productEntityOptional.get();

			ProductAdapter.mapModelValuesToEntityForUpdate(request, productEntity);
			productEntity.setUpdatedBy(loggedInUser);
			productRepository.save(productEntity);
			log.info("Product {} successfully created by {} ", productEntity.getProductId(), loggedInUser);
			return responseUtil.prepareResponse(
					(T) new ResponseDto(HttpStatus.CREATED, ProductsConstants.RECORD_CREATION_MESSAGE),
					HttpStatus.CREATED);
		} catch (Exception ex) {
			log.error("Exception occurred while updating product with exception ", ex);
			return responseUtil
					.prepareResponse(
							(T) new ErrorDto(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage(),
									ex.getLocalizedMessage(), System.currentTimeMillis()),
							HttpStatus.INTERNAL_SERVER_ERROR);
		} finally {
			log.info("Exiting updateProduct method at  {} ", System.currentTimeMillis());
		}
	}

	public ResponseEntity<T> deleteProduct(BigInteger productId, String loggedInUser) {
		log.info("Entering updateProduct Method at {} ", System.currentTimeMillis());
		try {
			Optional<Product> productEntityOptional = productRepository.findById(request.getProductId());
			if (productEntityOptional.isEmpty()) {
				return responseUtil.prepareResponse(
						(T) new ResponseDto(HttpStatus.BAD_REQUEST, ProductsConstants.INVALID_PRODUCT_ID),
						HttpStatus.BAD_REQUEST);
			}
			Product productEntity = productEntityOptional.get();

			ProductAdapter.mapModelValuesToEntityForUpdate(request, productEntity);
			productEntity.setUpdatedBy(loggedInUser);
			productRepository.save(productEntity);
			log.info("Product {} successfully created by {} ", productEntity.getProductId(), loggedInUser);
			return responseUtil.prepareResponse(
					(T) new ResponseDto(HttpStatus.CREATED, ProductsConstants.RECORD_CREATION_MESSAGE),
					HttpStatus.CREATED);
		} catch (Exception ex) {
			log.error("Exception occurred while updating product with exception ", ex);
			return responseUtil
					.prepareResponse(
							(T) new ErrorDto(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage(),
									ex.getLocalizedMessage(), System.currentTimeMillis()),
							HttpStatus.INTERNAL_SERVER_ERROR);
		} finally {
			log.info("Exiting updateProduct method at  {} ", System.currentTimeMillis());
		}
	}

}
