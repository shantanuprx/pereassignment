package com.assignment.userservice.service;

import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.assignment.userservice.dto.AddressDto;
import com.assignment.userservice.dto.ErrorDto;
import com.assignment.userservice.dto.ResponseDto;
import com.assignment.userservice.entity.Address;
import com.assignment.userservice.repository.AddressRepository;
import com.assignment.userservice.util.ResponseUtil;
import com.fasterxml.jackson.databind.ObjectMapper;

import lombok.extern.slf4j.Slf4j;

@Service("address")
@Slf4j
public class AddressServices<T> implements BaseService<T>{

	@Autowired
	private AddressRepository addressRepository;
	
	@Autowired
	private ResponseUtil<T> responseUtil;
	
	@Override
	public ResponseEntity<T> getDetails(Map<String, Object> requestData) {
		log.info("Entering getDetails Method at {} ", System.currentTimeMillis());
		try {
			
			AddressDto addressDto = new ObjectMapper().convertValue(requestData, AddressDto.class);
			
			Optional<Address> productEntityOptional = addressRepository.findByRecordIdAndUserId(addressDto.getId(), addressDto.getUserId());
			if (productEntityOptional.isEmpty()) {
				return responseUtil.prepareResponse(
						(T) new ResponseDto(HttpStatus.BAD_REQUEST, ProductsConstants.INVALID_PRODUCT_ID),
						HttpStatus.BAD_REQUEST);
			}
			Product productEntity = productEntityOptional.get();
			ProductDto productDto = ProductAdapter.convertEntityToModel(productEntity);
			log.info("Product {} successfully fetched ", productEntity.getProductId());
			return responseUtil.prepareResponse((T) productDto, HttpStatus.OK);
		} catch (Exception ex) {
			log.error("Exception occurred while fetching address details with exception ", ex);
			return responseUtil
					.prepareResponse(
							(T) new ErrorDto(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage(),
									ex.getLocalizedMessage(), System.currentTimeMillis()),
							HttpStatus.INTERNAL_SERVER_ERROR);
		} finally {
			log.info("Exiting getDetails method at  {} ", System.currentTimeMillis());
		}
	}

	@Override
	public ResponseEntity<T> addDetails(Map<String, Object> requestData) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ResponseEntity<T> updateDetails(Map<String, Object> requestData) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ResponseEntity<T> deleteDetails(Map<String, Object> requestData) {
		// TODO Auto-generated method stub
		return null;
	}

}
