package com.assignment.orderservice.service;

import java.math.BigInteger;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.assignment.orderservice.adapters.OrdersAdapter;
import com.assignment.orderservice.dto.ErrorDto;
import com.assignment.orderservice.dto.OrdersDto;
import com.assignment.orderservice.dto.ResponseDto;
import com.assignment.orderservice.entity.Orders;
import com.assignment.orderservice.repository.OrdersRepository;
import com.assignment.orderservice.util.ResponseUtil;
import com.assignment.productservice.adapters.ProductAdapter;
import com.assignment.productservice.dto.ProductDto;
import com.assignment.productservice.entity.Product;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class OrderOperationService<T> {
	
	@Autowired
	private OrdersRepository ordersRepository;
	
	@Autowired
	private ResponseUtil<T> responseUtil;

	public ResponseEntity<T> updateOrder(@Valid OrdersDto request) {
		// TODO Auto-generated method stub
		return null;
	}

	public ResponseEntity<T> createOrder(@Valid OrdersDto request) {
		// TODO Auto-generated method stub
		return null;
	}

	public ResponseEntity<T> getDetails(Map<String, Object> requestMap) {
		log.info("Entering getDetails Method at {} ", System.currentTimeMillis());
		try {
			if(requestMap.containsKey("orderId")) {
				Optional<Orders> orderOptionalEntity = ordersRepository.findByOrderIdAndUserId((int) requestMap.get("orderId"), (int) requestMap.get("userId"));
				if (orderOptionalEntity.isEmpty()) {
					return responseUtil.prepareResponse(
							(T) new ResponseDto(HttpStatus.BAD_REQUEST, OrdersContant.INVALID_PRODUCT_ID),
							HttpStatus.BAD_REQUEST);
				}
				Orders productEntity = orderOptionalEntity.get();
				OrdersDto productDto = OrdersAdapter.convertEntityToModel(productEntity);
				log.info("Product {} successfully fetched ", productEntity.getProductId());
				return responseUtil.prepareResponse((T) productDto, HttpStatus.OK);
			}
		} catch (Exception ex) {
			log.error("Exception occurred while fetching product details with exception ", ex);
			return responseUtil
					.prepareResponse(
							(T) new ErrorDto(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage(),
									ex.getLocalizedMessage(), System.currentTimeMillis()),
							HttpStatus.INTERNAL_SERVER_ERROR);
		} finally {
			log.info("Exiting getDetails method at  {} ", System.currentTimeMillis());
		}
	}

	public ResponseEntity<T> getDetails(BigInteger orderId) {
		// TODO Auto-generated method stub
		return null;
	}

}
